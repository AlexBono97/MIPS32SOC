<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>1</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>IVERILOG</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>MemoryRDataDecoder</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>inD:32,ofs:2,bitX,ds:2</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>module MemoryRDataDecoder(
    input [31:0] inD,
    input [1:0] ofs,
    input bitX,
    input [1:0] ds,
    output reg[31:0] oD
);

always @(*)
    case (ds)
      2&apos;b00://Word
      begin
        oD=inD;
      end
      2&apos;b01://Half-Word
      begin
        case (ofs)
          2&apos;b00:
              begin
                if(bitX) begin//do signExtend
                  oD={ {16{inD[31]}},inD[31:16]};
                end else begin
                  oD={16&apos;b0,inD[31:16]};
                end
              end
              2&apos;b01:
              begin
                if(bitX) begin//do signExtend
                  oD={ {16{inD[31]}},inD[31:16]};
                end else begin
                  oD={16&apos;b0,inD[31:16]};
                end
              end
              2&apos;b10:
              begin
                if(bitX) begin
                oD={ {16{inD[15]}},inD[15:0]};
                end else begin
                oD={16&apos;b0,inD[15:0]};
                end
              end
              2&apos;b11:
              begin
                if(bitX) begin
                oD={ {16{inD[15]}},inD[15:0]};
                end else begin
                oD={16&apos;b0,inD[15:0]};
                end
              end
        endcase
      end 
      2&apos;b10://Byte
      begin
        case (ofs)
          2&apos;b00:
              begin
                if(bitX) begin//do signExtend
                  oD={ {24{inD[31]}} ,inD[31:24]};
                end else begin
                  oD={24&apos;b0,inD[31:24]};
                end
              end
              2&apos;b01:
              begin
                if(bitX) begin//do signExtend
                  oD={ {24{inD[23]}},inD[23:16]};
                end else begin
                  oD={24&apos;b0,inD[23:16]};
                end
              end
              2&apos;b10:
              begin
                if(bitX) begin//do signExtend
                  oD={ {24{inD[15]}},inD[15:8]};
                end else begin
                  oD={24&apos;b0,inD[15:8]};
                end
              end
              2&apos;b11:
              begin
                if(bitX) begin//do signExtend
                  oD={ {24{inD[7]}},inD[7:0]};
                end else begin
                  oD={24&apos;b0,inD[7:0]};
                end
              end
        endcase
      end
      default: 
        oD=31&apos;b0;
    endcase
endmodule</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>oD:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="480" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>dOut</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="680" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>dIn</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="200" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>offset</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="160" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>dExt</string>
        </entry>
      </elementAttributes>
      <pos x="160" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>dSize</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="200" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>dIn          offset  dExt    dSize       dOut

# Word access test
0xaabbccdd   0       0       0           0xaabbccdd
0xaabbccdd   1       0       0           0xaabbccdd
0xaabbccdd   2       0       0           0xaabbccdd
0xaabbccdd   3       0       0           0xaabbccdd
0xaabbccdd   0       1       0           0xaabbccdd
0xaabbccdd   1       1       0           0xaabbccdd
0xaabbccdd   2       1       0           0xaabbccdd
0xaabbccdd   3       1       0           0xaabbccdd

# Half Word tests
0xaabbccdd   0       0       1           0x0000aabb
0xaabbccdd   0       1       1           0xffffaabb
0xaabbccdd   1       0       1           0x0000aabb
0xaabbccdd   1       1       1           0xffffaabb
0xaabbccdd   2       0       1           0x0000ccdd
0xaabbccdd   2       1       1           0xffffccdd
0xaabbccdd   3       0       1           0x0000ccdd
0xaabbccdd   3       1       1           0xffffccdd

# Byte access tests          
0xaabbccdd   0       0       2           0x000000aa
0xaabbccdd   1       0       2           0x000000bb
0xaabbccdd   2       0       2           0x000000cc
0xaabbccdd   3       0       2           0x000000dd
0xaabbccdd   0       1       2           0xffffffaa
0xaabbccdd   1       1       2           0xffffffbb
0xaabbccdd   2       1       2           0xffffffcc
0xaabbccdd   3       1       2           0xffffffdd  </dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="380" y="140"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="200" y="240"/>
      <p2 x="320" y="240"/>
    </wire>
    <wire>
      <p1 x="200" y="320"/>
      <p2 x="480" y="320"/>
    </wire>
    <wire>
      <p1 x="320" y="260"/>
      <p2 x="480" y="260"/>
    </wire>
    <wire>
      <p1 x="160" y="340"/>
      <p2 x="200" y="340"/>
    </wire>
    <wire>
      <p1 x="260" y="340"/>
      <p2 x="480" y="340"/>
    </wire>
    <wire>
      <p1 x="160" y="280"/>
      <p2 x="480" y="280"/>
    </wire>
    <wire>
      <p1 x="560" y="300"/>
      <p2 x="680" y="300"/>
    </wire>
    <wire>
      <p1 x="200" y="460"/>
      <p2 x="260" y="460"/>
    </wire>
    <wire>
      <p1 x="320" y="240"/>
      <p2 x="320" y="260"/>
    </wire>
    <wire>
      <p1 x="260" y="340"/>
      <p2 x="260" y="460"/>
    </wire>
    <wire>
      <p1 x="200" y="320"/>
      <p2 x="200" y="340"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>